df["√Çge"].hist(bins=10)
df["Sexe"].value_counts().plot(kind="bar")

df["Ville"].value_counts().plot(kind="bar")

# Charger le fichier CSV
df = pd.read_csv(r"C:\Users\lenovo\Downloads\supermarche_clients.csv")

# üìä Graphique du panier moyen par sexe
plt.figure(figsize=(10, 5))
sns.barplot(x=df.groupby("Sexe")["Panier moyen (‚Ç¨)"].mean().index, 
            y=df.groupby("Sexe")["Panier moyen (‚Ç¨)"].mean().values, 
            palette="viridis")
plt.xlabel("Sexe")
plt.ylabel("Panier moyen (‚Ç¨)")
plt.title("Panier moyen par sexe")
plt.show()

# üìä Graphique du panier moyen par ville
plt.figure(figsize=(12, 6))
sns.barplot(x=df.groupby("Ville")["Panier moyen (‚Ç¨)"].mean().index, 
            y=df.groupby("Ville")["Panier moyen (‚Ç¨)"].mean().values, 
            palette="coolwarm")
plt.xlabel("Ville")
plt.ylabel("Panier moyen (‚Ç¨)")
plt.title("Panier moyen par ville")
plt.xticks(rotation=45)
plt.show()


# üìä Graphique du panier moyen par sexe
plt.figure(figsize=(10, 5))
sns.barplot(x=df.groupby("Sexe")["Panier moyen (‚Ç¨)"].mean().index, 
            y=df.groupby("Sexe")["Panier moyen (‚Ç¨)"].mean().values, 
            palette="viridis")
plt.xlabel("Sexe")
plt.ylabel("Panier moyen (‚Ç¨)")
plt.title("Panier moyen par sexe")
plt.show()

# üìä Graphique du panier moyen par ville
plt.figure(figsize=(12, 6))
sns.barplot(x=df.groupby("Ville")["Panier moyen (‚Ç¨)"].mean().index, 
            y=df.groupby("Ville")["Panier moyen (‚Ç¨)"].mean().values, 
            palette="coolwarm")
plt.xlabel("Ville")
plt.ylabel("Panier moyen (‚Ç¨)")
plt.title("Panier moyen par ville")
plt.xticks(rotation=45)
plt.show()

# D√©terminer les moyens de paiement pr√©f√©r√©s des clients
paiement_counts = df["Moyen de paiement pr√©f√©r√©"].value_counts().reset_index()
paiement_counts.columns = ["Moyen de paiement pr√©f√©r√©", "Nombre de clients"]

# üìä Affichage du graphique en barres
plt.figure(figsize=(8, 5))
sns.barplot(
    data=paiement_counts, 
    x="Moyen de paiement pr√©f√©r√©", 
    y="Nombre de clients", 
    hue="Moyen de paiement pr√©f√©r√©",  # Ajout de hue pour √©viter le warning
    palette="viridis", 
    legend=False  # Suppression de la l√©gende inutile
)

plt.xlabel("Moyen de paiement pr√©f√©r√©")
plt.ylabel("Nombre de clients")
plt.title("R√©partition des moyens de paiement pr√©f√©r√©s")
plt.xticks(rotation=45)  # Rotation pour meilleure lisibilit√©
plt.show()

# Cr√©ation des segments de d√©penses
df["Segment"] = pd.qcut(df["Total d√©pens√© (‚Ç¨)"], q=4, labels=["Faible", "Moyen", "√âlev√©", "Tr√®s √©lev√©"])

# Compter les occurrences de chaque segment
segment_counts = df["Segment"].value_counts().reset_index()
segment_counts.columns = ["Segment", "Nombre de clients"]

# üìä Affichage du graphique en barres
plt.figure(figsize=(8, 5))
sns.barplot(
    data=segment_counts, 
    x="Segment", 
    y="Nombre de clients", 
    hue="Segment",  # Ajout de hue pour √©viter le warning
    palette="viridis", 
    legend=False  # Suppression de la l√©gende inutile
)

plt.xlabel("Segment de d√©penses")
plt.ylabel("Nombre de clients")
plt.title("R√©partition des clients par segment de d√©penses")
plt.xticks(rotation=45)  # Rotation pour meilleure lisibilit√©
plt.show()


# üìä Nuage de points : √Çge vs Total d√©pens√© (‚Ç¨)
plt.figure(figsize=(8, 5))

# Cr√©ation du scatter plot avec Seaborn
scatter = sns.scatterplot(
    data=df, 
    x="√Çge", 
    y="Total d√©pens√© (‚Ç¨)", 
    hue="Score de fid√©lit√©",  # La couleur repr√©sente le score de fid√©lit√©
    palette="viridis", 
    alpha=0.7  # Ajout de transparence pour √©viter la surcharge de points
)

# Placer la l√©gende en dehors du graphique
plt.legend(title="Score de fid√©lit√©", bbox_to_anchor=(1.05, 1), loc="upper left")

plt.xlabel("√Çge des clients")
plt.ylabel("Total d√©pens√© (‚Ç¨)")
plt.title("Relation entre l'√¢ge et le total d√©pens√©")
plt.grid(True)  # Ajout d'une grille pour am√©liorer la lecture
plt.show()
